name: Android CI & Analysis of NoSaveChat App

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the main branch
  push:
    branches: [ "main" ] # Adjust if your main branch has a different name (e.g., master)
  # Triggers the workflow on pull request events targeted at the main branch
  pull_request:
    branches: [ "main" ] # Adjust if your main branch has a different name

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-and-analyze:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      # Print some context about the workflow to the logs
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      # Step 0: Cancel previous runs on the same branch
      # This is useful for pull requests to ensure only the latest run is considered
      # - name: Cancel Previous Runs
      #   uses: styfle/cancel-workflow-action@0.12.0
      #   with:
      #     access_token: ${{ github.token }}

      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up JDK (Android development requires Java)
      # Choose a version compatible with your project's Gradle and Android Gradle Plugin
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin' # Or 'zulu', 'adopt', etc.
          cache: 'gradle' # Cache Gradle dependencies based on lock files

      # Step 3: Grant execute permission for gradlew
      # Needed because checkout doesn't preserve execute permissions
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Step 4: Run Android Lint
      # Checks for Android specific issues
      - name: Run Android Lint
        run: ./gradlew lintDebug

      # Step 5: Run Ktlint Check
      # Checks Kotlin code style
      - name: Run Ktlint Check
        run: ./gradlew ktlintCheck

      # Step 6: Run Detekt Analysis
      # Checks for code smells, complexity, etc.
      - name: Run Detekt Analysis
        run: ./gradlew detekt

      # --- Optional but Recommended Steps ---

      # Step 7: Run Unit Tests
      #- name: Run Unit Tests
      #  run: ./gradlew testDebugUnitTest

      # Step 8: Build Debug APK
      # Ensures the app actually builds
      - name: Build Debug APK
        run: ./gradlew assembleDebug
      # If you need to use this APK later (e.g., upload it somewhere for testing, attach it to the
      # workflow run results), you would typically add another step after the build step using an
      # action like actions/upload-artifact@v4. Without such a step, the APK is discarded when the
      # runner finishes its job.
